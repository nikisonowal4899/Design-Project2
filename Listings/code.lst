C51 COMPILER V9.60.0.0   CODE                                                              03/21/2020 13:01:07 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CODE
OBJECT MODULE PLACED IN .\Objects\code.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\code
                    -.lst) TABS(2) OBJECT(.\Objects\code.obj)

line level    source

   1          #include <reg51.h>
   2          #include <stdlib.h>
   3          #include "lcd.h"
   4          #include "delay.h"
   5          #include "eeprom.h"
   6          
   7          sbit ko1 = P3^0;
   8          sbit ko2 = P3^1;
   9          sbit ko3 = P3^2;
  10          sbit ko4 = P3^3;
  11          
  12          sbit ki1 = P1^0;
  13          sbit ki2 = P1^1;
  14          sbit ki3 = P1^2;
  15          sbit ki4 = P1^3;
  16          // keyboard connections
  17          
  18          sbit buzzer = P3^7;
  19          // buzzer connection
  20          
  21          sbit motor_an = P3^4;
  22          sbit motor_ct = P3^5;
  23          // motor driver circuit connection
  24          
  25          //Global variables
  26          #define pw_address 0xE0
  27          #define incorrect_attempts 0xC6
  28          
  29          unsigned char keyboard_data[13];
  30          unsigned char temp_array[13];
  31          unsigned char data_index; // pointer to the position of the keyboard_data array
  32          unsigned char screen_flag; // tells the programm about the current screen
  33          unsigned char security_breach; // no. of times incorrect attempts have been made 
  34          
  35          //Functions
  36          void keyboard_scan();
  37          void keyboard_input(unsigned char);
  38          void home_screen();
  39          unsigned char match_password();
  40          unsigned char confirm_password();
  41          
  42          // -*-*-*-*-* MAIN FUNCTION START -*-*-*-*-*-*-*- //
  43          void main() {
  44   1        P3 = 0x00; // OUTPUT
  45   1        P2 = 0x00; // Port 2 as OUTPUT to LCD
  46   1        P1 = 0xFF; // keyboard input
  47   1        
  48   1        lcd_init();
  49   1        home_screen();
  50   1        
  51   1        for(data_index = 0; data_index < 13; data_index++) {
  52   2          temp_array[data_index] = '\0';
  53   2          keyboard_data[data_index] = '\0';
  54   2        }
C51 COMPILER V9.60.0.0   CODE                                                              03/21/2020 13:01:07 PAGE 2   

  55   1        
  56   1        data_index = 0;
  57   1        security_breach = eeprom_read_byte(incorrect_attempts);
  58   1        
  59   1        while(1) {
  60   2          keyboard_scan();
  61   2        }
  62   1         
  63   1      }
  64          // -*-*-*-*-* MAIN FUNCTION END -*-*-*-*-*-*-*- //
  65          
  66          void keyboard_scan() {
  67   1        // make each output lines low one by one
  68   1        
  69   1        ko1 = 0; ko2 = 1; ko3 = 1; ko4 = 1; // make row 1 low
  70   1        if(ki1 == 0) { // '1' is pressed
  71   2          delay(220);
  72   2          keyboard_input('1');
  73   2          delay(750);
  74   2          while(ki1 == 0);
  75   2        }
  76   1        if(ki2 == 0) { // '2' is pressed
  77   2          delay(220);
  78   2          keyboard_input('2');
  79   2          delay(750);
  80   2          while(ki2 == 0);
  81   2        }
  82   1        if(ki3 == 0) { // '3' is pressed
  83   2          delay(220);
  84   2          keyboard_input('3');
  85   2          delay(750);
  86   2          while(ki3 == 0);
  87   2        }
  88   1        if(ki4 == 0) { // 'A' is pressed
  89   2          delay(220);
  90   2          keyboard_input('A');
  91   2          delay(750);
  92   2          while(ki4 == 0);
  93   2        }
  94   1        // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//
  95   1        
  96   1        ko1 = 1; ko2 = 0; ko3 = 1; ko4 = 1; // make row 2 low
  97   1        if(ki1 == 0) { // '4' is pressed
  98   2          delay(220);
  99   2          keyboard_input('4');
 100   2          delay(750);
 101   2          while(ki1 == 0);
 102   2        }
 103   1        if(ki2 == 0) { // '5' is pressed
 104   2          delay(220);
 105   2          keyboard_input('5');
 106   2          delay(750);
 107   2          while(ki2 == 0);
 108   2        }
 109   1        if(ki3 == 0) { // '6' is pressed
 110   2          delay(220);
 111   2          keyboard_input('6');
 112   2          delay(750);
 113   2          while(ki3 == 0);
 114   2        }
 115   1        if(ki4 == 0) { // 'B' is pressed // 'B' will be used as Display password
 116   2          delay(220);
C51 COMPILER V9.60.0.0   CODE                                                              03/21/2020 13:01:07 PAGE 3   

 117   2          keyboard_input('B');
 118   2          delay(750);
 119   2          while(ki4 == 0);
 120   2          keyboard_input('b');
 121   2        }
 122   1        // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//
 123   1        
 124   1        ko1 = 1; ko2 = 1; ko3 = 0; ko4 = 1; // make row 3 low
 125   1        if(ki1 == 0) { // '7' is pressed
 126   2          delay(220);
 127   2          keyboard_input('7');
 128   2          delay(750);
 129   2          while(ki1 == 0);
 130   2        }
 131   1        if(ki2 == 0) { // '8' is pressed
 132   2          delay(220);
 133   2          keyboard_input('8');
 134   2          delay(750);
 135   2          while(ki2 == 0);
 136   2        }
 137   1        if(ki3 == 0) { // '9' is pressed
 138   2          delay(220);
 139   2          keyboard_input('9');
 140   2          delay(750);
 141   2          while(ki3 == 0);
 142   2        }
 143   1        if(ki4 == 0) { // 'C' is pressed
 144   2          delay(220);
 145   2          keyboard_input('C');
 146   2          delay(750);
 147   2          while(ki4 == 0);
 148   2        }
 149   1        // -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*//
 150   1        
 151   1        ko1 = 1; ko2 = 1; ko3 = 1; ko4 = 0; // make row 4 low
 152   1        if(ki1 == 0) { // '*' is pressed
 153   2          delay(220);
 154   2          keyboard_input('*');
 155   2          delay(750);
 156   2          while(ki1 == 0);
 157   2        }
 158   1        if(ki2 == 0) { // '0' is pressed
 159   2          delay(220);
 160   2          keyboard_input('0');
 161   2          delay(750);
 162   2          while(ki2 == 0);
 163   2        }
 164   1        if(ki3 == 0) { // '#' is pressed
 165   2          delay(220);
 166   2          keyboard_input('#');
 167   2          delay(750);
 168   2          while(ki3 == 0);
 169   2        }
 170   1        if(ki4 == 0) { // 'D' is pressed
 171   2          delay(220);
 172   2          keyboard_input('D');
 173   2          delay(750);
 174   2          while(ki4 == 0);
 175   2        }
 176   1      }
 177          
 178          void keyboard_input(unsigned char dat) {
C51 COMPILER V9.60.0.0   CODE                                                              03/21/2020 13:01:07 PAGE 4   

 179   1        
 180   1        if(dat == '#') { // Enter is pressed // Enter key will have many purpose    
 181   2          if(data_index != 0 && screen_flag == 'H') { // Password matching purpose 
 182   3            unsigned char check = match_password();
 183   3            reset_screen();
 184   3            
 185   3            if(check == '1') {
 186   4              lcd_print(0x10); // password match
 187   4              screen_flag = 'R';
 188   4              security_breach = 0;
 189   4              eeprom_write_byte(incorrect_attempts, security_breach);
 190   4            } else if(check == '0') {
 191   4              lcd_print(0x20); // wrong password
 192   4              screen_flag = 'X';
 193   4              security_breach++;
 194   4              if(security_breach == 4) buzzer = 1;
 195   4                else eeprom_write_byte(incorrect_attempts, security_breach);
 196   4            } 
 197   3          }
 198   2          else if(screen_flag == 'C') { // change password Menu
 199   3              reset_screen();
 200   3              lcd_print(0x30); // old password?     
 201   3              lcd_write(0xC0, 0);
 202   3              lcd_print(0xC0); // arrow
 203   3              lcd_write(0x0F, 0); // cursor on blinking on
 204   3              screen_flag = 'O';
 205   3            } 
 206   2          else if(screen_flag == 'O' && data_index != 0) {
 207   3              if(match_password() == '1') { // old password entered is correct, proceed to enter New password
 208   4                reset_screen();
 209   4                lcd_print(0x40); //New password
 210   4                lcd_write(0xC0, 0);
 211   4                lcd_print(0xC0); //Arrow
 212   4                lcd_write(0x0F, 0); // cursor on blinking on
 213   4                screen_flag = 'N';
 214   4                for(data_index=0; data_index<13; data_index++) keyboard_data[data_index] = '\0'; // clearing the keyb
             -oard_data array
 215   4                data_index = 0;
 216   4              } else {
 217   4                reset_screen();
 218   4                lcd_write(0x0C, 0); // cursor off blinking off
 219   4                lcd_print(0x20); // wrong password
 220   4                lcd_write(0xC0, 0);
 221   4                lcd_print(0x50); // Go to home
 222   4                screen_flag = 'W';
 223   4              }
 224   3            } 
 225   2          else if(screen_flag == 'N') {
 226   3              unsigned char i;
 227   3              reset_screen();
 228   3              lcd_print(0x60); // conf. password
 229   3              lcd_write(0xC0, 0);
 230   3              lcd_print(0xC0); // arrow
 231   3              
 232   3              //copy Data from keyboard_array to temp_array for confirming purpose later
 233   3              for(i=0; i< data_index; i++) {
 234   4                temp_array[i] = keyboard_data[i];
 235   4              }
 236   3              data_index = 0;
 237   3              screen_flag = 'F';
 238   3            } 
 239   2          else if(screen_flag == 'F') {
C51 COMPILER V9.60.0.0   CODE                                                              03/21/2020 13:01:07 PAGE 5   

 240   3            unsigned char temp_address = pw_address;
 241   3              if(confirm_password() == '1') { //password matched// change the password
 242   4                reset_screen();
 243   4                
 244   4                eeprom_write_string(keyboard_data, pw_address); // storing the new password in EEPROM
 245   4                
 246   4                lcd_write(0x0C, 0); // cursor off blinking off
 247   4                lcd_print(0x70); // Done !!
 248   4                lcd_write(0xC0, 0);
 249   4                lcd_print(0x80); // press Home
 250   4                screen_flag = 'J'; // J for Null function
 251   4              } else {
 252   4                reset_screen();
 253   4                lcd_write(0x0C, 0); // cursor off blinking off
 254   4                lcd_print(0xD0); // incorrect
 255   4                lcd_write(0xC0, 0);
 256   4                lcd_print(0x80); // press home
 257   4                screen_flag = 'J'; // Null function
 258   4              }
 259   3              for(data_index=0; data_index<13; data_index++) temp_array[data_index] = '\0'; // clearing the temp arr
             -ay
 260   3            }
 261   2            return ;
 262   2        } 
 263   1        
 264   1        else if((dat == 'B' || dat == 'b') && (screen_flag == 'H' || screen_flag == 'O' || screen_flag == 'N' || 
             -screen_flag == 'F')){
 265   2          unsigned char index;
 266   2          if(dat == 'B') { // show passwod
 267   3            lcd_write(0xC4, 0); // set cursor to the beginning
 268   3            for(index=0; index<data_index; index++) lcd_write(keyboard_data[index], 1);
 269   3          }
 270   2          else {
 271   3            lcd_write(0xC4, 0); // set cursor to the beginning 
 272   3            for(index=0; index<data_index; index++) lcd_write(0xC8, 1); // print katakana 'ne'
 273   3          }
 274   2          return;
 275   2        }
 276   1      
 277   1        else if(dat == 'D') { // Home key is pressed // Home key need not require any Flag to check 
 278   2          unsigned char i;
 279   2          home_screen();
 280   2          for(i=0; i<13; i++) { // clearing the keyboard Data array
 281   3            keyboard_data[i] = '\0';
 282   3          }
 283   2          data_index = 0;
 284   2          return ;
 285   2        } 
 286   1          
 287   1        else if(dat == '*') { // Backspace is pressed
 288   2          if(data_index > 0 && (screen_flag == 'H' || screen_flag == 'O' || screen_flag == 'N' || screen_flag == '
             -F')) {
 289   3            lcd_write(0x10, 0); //Moving LCD cursor backward
 290   3            lcd_write(' ', 1); // Printing a Space
 291   3            lcd_write(0x10, 0); // Moving cursor backward again
 292   3            data_index--;
 293   3          } 
 294   2          return ;
 295   2        } 
 296   1        
 297   1        else if(dat == 'C') { // Setting Menu is Called // Setting menu can be called only from Home screen
 298   2          if(screen_flag == 'H') {
C51 COMPILER V9.60.0.0   CODE                                                              03/21/2020 13:01:07 PAGE 6   

 299   3            reset_screen();
 300   3            lcd_write(0x0C, 0); // Cursor off Blinking off
 301   3            lcd_print(0x90); // change password
 302   3            lcd_write(0xC0, 0); // Go to second row
 303   3            lcd_print(0xA0); //press enter
 304   3            screen_flag = 'C';
 305   3            data_index = 0;
 306   3          }   
 307   2          return ;
 308   2        }
 309   1        
 310   1        else {
 311   2          if(data_index < 12 && (screen_flag == 'H' || screen_flag == 'O' || screen_flag == 'N' || screen_flag == 
             -'F')) { // Store the input in Keyboard Array
 312   3            lcd_write(0xC8, 1); // katakana 'Ne' character
 313   3            keyboard_data[data_index] = dat;
 314   3            data_index++;
 315   3          }
 316   2        }
 317   1      }
 318          
 319          unsigned char match_password() {
 320   1        unsigned char password_array[13]; 
 321   1        unsigned char temp_address = pw_address, temp, index = 0;
 322   1        
 323   1        do { //copying the password from the EEPROM
 324   2          temp = eeprom_read_byte(temp_address);
 325   2          password_array[index] = temp;
 326   2          index++; temp_address++;
 327   2        } while(temp != '\0'); 
 328   1        index--; // index is the Size of the password array
 329   1        
 330   1        if(index == data_index) {
 331   2          for(index=0; index<data_index; index++) {
 332   3            if(keyboard_data[index] != password_array[index]) return '0';
 333   3          }
 334   2          return '1';
 335   2        } else return '0';
 336   1      }
 337          
 338          unsigned char confirm_password() {
 339   1        unsigned char i=0;
 340   1        while(temp_array[i] != '\0') i++; //Acquiring Size of temp array
 341   1        if(i == data_index) {
 342   2          for(i=0; i<data_index; i++) { // Matching each character
 343   3            if(keyboard_data[i] != temp_array[i]) return '0';
 344   3          }
 345   2          return '1';
 346   2        } else return '0';
 347   1      }
 348          
 349          void home_screen() { // the default lcd screen 
 350   1        reset_screen();
 351   1        lcd_print(0xB0); // enter password
 352   1        lcd_write(0xC0, 0); //Jump to second line position 0
 353   1        lcd_print(0xC0); // arrow
 354   1        lcd_write(0x0F, 0); // cursor ON blinking ON
 355   1        screen_flag = 'H';
 356   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.0.0   CODE                                                              03/21/2020 13:01:07 PAGE 7   

   CODE SIZE        =   1284    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     29      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
